***************************************************************************

IPython post-mortem report

{'commit_hash': u'5c9c918',
 'commit_source': 'installation',
 'default_encoding': 'UTF-8',
 'ipython_path': '/Users/cpd/miniconda2/envs/cpd/lib/python2.7/site-packages/IPython',
 'ipython_version': '5.1.0',
 'os_name': 'posix',
 'platform': 'Darwin-15.6.0-x86_64-i386-64bit',
 'sys_executable': '/Users/cpd/miniconda2/envs/cpd/bin/python',
 'sys_platform': 'darwin',
 'sys_version': '2.7.12 |Anaconda 4.0.0 (x86_64)| (default, Jul  2 2016, 17:43:17) \n[GCC 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2336.11.00)]'}

***************************************************************************



***************************************************************************

Crash traceback:

---------------------------------------------------------------------------
---------------------------------------------------------------------------
KeyboardInterrupt  Python 2.7.12: /Users/cpd/miniconda2/envs/cpd/bin/python
                                                   Fri Oct 14 10:24:25 2016
A problem occurred executing Python code.  Here is the sequence of function
calls leading up to the error, with the most recent (innermost) call last.
/Users/cpd/miniconda2/envs/cpd/bin/ipython in <module>()
      1 #!/Users/cpd/miniconda2/envs/cpd/bin/python
      2 if __name__ == '__main__':
      3     import sys
      4     import IPython
      5 
----> 6     sys.exit(IPython.start_ipython())
        global sys.exit = <built-in function exit>
        global IPython.start_ipython = <function start_ipython at 0x104fcf398>

/Users/cpd/miniconda2/envs/cpd/lib/python2.7/site-packages/IPython/__init__.pyc in start_ipython(argv=None, **kwargs={})
    104     This is a public API method, and will survive implementation changes.
    105     
    106     Parameters
    107     ----------
    108     
    109     argv : list or None, optional
    110         If unspecified or None, IPython will parse command-line options from sys.argv.
    111         To prevent any command-line parsing, pass an empty list: `argv=[]`.
    112     user_ns : dict, optional
    113         specify this dictionary to initialize the IPython user namespace with particular values.
    114     kwargs : various, optional
    115         Any other kwargs will be passed to the Application constructor,
    116         such as `config`.
    117     """
    118     from IPython.terminal.ipapp import launch_new_instance
--> 119     return launch_new_instance(argv=argv, **kwargs)
        launch_new_instance = <bound method MetaHasTraits.launch_instance of <class 'IPython.terminal.ipapp.TerminalIPythonApp'>>
        argv = None
        kwargs = {}
    120 
    121 def start_kernel(argv=None, **kwargs):
    122     """Launch a normal IPython kernel instance (as opposed to embedded)
    123     
    124     `IPython.embed_kernel()` puts a shell in a particular calling scope,
    125     such as a function or method for debugging purposes,
    126     which is often not desirable.
    127     
    128     `start_kernel()` does full, regular IPython initialization,
    129     including loading startup files, configuration, etc.
    130     much of which is skipped by `embed()`.
    131     
    132     Parameters
    133     ----------
    134     

/Users/cpd/miniconda2/envs/cpd/lib/python2.7/site-packages/traitlets/config/application.pyc in launch_instance(cls=<class 'IPython.terminal.ipapp.TerminalIPythonApp'>, argv=None, **kwargs={})
    642         for cls in self._classes_in_config_sample():
    643             lines.append(cls.class_config_section())
    644         return '\n'.join(lines)
    645 
    646     def exit(self, exit_status=0):
    647         self.log.debug("Exiting application: %s" % self.name)
    648         sys.exit(exit_status)
    649 
    650     @classmethod
    651     def launch_instance(cls, argv=None, **kwargs):
    652         """Launch a global instance of this Application
    653 
    654         If a global instance already exists, this reinitializes and starts it
    655         """
    656         app = cls.instance(**kwargs)
--> 657         app.initialize(argv)
        app.initialize = <bound method TerminalIPythonApp.initialize of <IPython.terminal.ipapp.TerminalIPythonApp object at 0x1028e7710>>
        argv = None
    658         app.start()
    659 
    660 #-----------------------------------------------------------------------------
    661 # utility functions, for convenience
    662 #-----------------------------------------------------------------------------
    663 
    664 def boolean_flag(name, configurable, set_help='', unset_help=''):
    665     """Helper for building basic --trait, --no-trait flags.
    666 
    667     Parameters
    668     ----------
    669 
    670     name : str
    671         The name of the flag.
    672     configurable : str

<decorator-gen-109> in initialize(self=<IPython.terminal.ipapp.TerminalIPythonApp object>, argv=None)

/Users/cpd/miniconda2/envs/cpd/lib/python2.7/site-packages/traitlets/config/application.pyc in catch_config_error(method=<function initialize>, app=<IPython.terminal.ipapp.TerminalIPythonApp object>, *args=(None,), **kwargs={})
     72     TRAITLETS_APPLICATION_RAISE_CONFIG_FILE_ERROR = False
     73 else:
     74     raise ValueError("Unsupported value for environment variable: 'TRAITLETS_APPLICATION_RAISE_CONFIG_FILE_ERROR' is set to '%s' which is none of  {'0', '1', 'false', 'true', ''}."% _envvar )
     75 
     76 
     77 @decorator
     78 def catch_config_error(method, app, *args, **kwargs):
     79     """Method decorator for catching invalid config (Trait/ArgumentErrors) during init.
     80 
     81     On a TraitError (generally caused by bad config), this will print the trait's
     82     message, and exit the app.
     83 
     84     For use on init methods, to prevent invoking excepthook on invalid input.
     85     """
     86     try:
---> 87         return method(app, *args, **kwargs)
        method = <function initialize at 0x104fcb2a8>
        app = <IPython.terminal.ipapp.TerminalIPythonApp object at 0x1028e7710>
        args = (None,)
        kwargs = {}
     88     except (TraitError, ArgumentError) as e:
     89         app.print_help()
     90         app.log.fatal("Bad config encountered during initialization:")
     91         app.log.fatal(str(e))
     92         app.log.debug("Config at the time: %s", app.config)
     93         app.exit(1)
     94 
     95 
     96 class ApplicationError(Exception):
     97     pass
     98 
     99 
    100 class LevelFormatter(logging.Formatter):
    101     """Formatter with additional `highlevel` record
    102 

/Users/cpd/miniconda2/envs/cpd/lib/python2.7/site-packages/IPython/terminal/ipapp.pyc in initialize(self=<IPython.terminal.ipapp.TerminalIPythonApp object>, argv=None)
    294 
    295         return super(TerminalIPythonApp, self).parse_command_line(argv)
    296     
    297     @catch_config_error
    298     def initialize(self, argv=None):
    299         """Do actions after construct, but before starting the app."""
    300         super(TerminalIPythonApp, self).initialize(argv)
    301         if self.subapp is not None:
    302             # don't bother initializing further, starting subapp
    303             return
    304         # print self.extra_args
    305         if self.extra_args and not self.something_to_run:
    306             self.file_to_run = self.extra_args[0]
    307         self.init_path()
    308         # create the shell
--> 309         self.init_shell()
        self.init_shell = <bound method TerminalIPythonApp.init_shell of <IPython.terminal.ipapp.TerminalIPythonApp object at 0x1028e7710>>
    310         # and draw the banner
    311         self.init_banner()
    312         # Now a variety of things that happen after the banner is printed.
    313         self.init_gui_pylab()
    314         self.init_extensions()
    315         self.init_code()
    316 
    317     def init_shell(self):
    318         """initialize the InteractiveShell instance"""
    319         # Create an InteractiveShell instance.
    320         # shell.display_banner should always be False for the terminal
    321         # based app, because we call shell.show_banner() by hand below
    322         # so the banner shows *before* all extension loading stuff.
    323         self.shell = TerminalInteractiveShell.instance(parent=self,
    324                         profile_dir=self.profile_dir,

/Users/cpd/miniconda2/envs/cpd/lib/python2.7/site-packages/IPython/terminal/ipapp.pyc in init_shell(self=<IPython.terminal.ipapp.TerminalIPythonApp object>)
    310         # and draw the banner
    311         self.init_banner()
    312         # Now a variety of things that happen after the banner is printed.
    313         self.init_gui_pylab()
    314         self.init_extensions()
    315         self.init_code()
    316 
    317     def init_shell(self):
    318         """initialize the InteractiveShell instance"""
    319         # Create an InteractiveShell instance.
    320         # shell.display_banner should always be False for the terminal
    321         # based app, because we call shell.show_banner() by hand below
    322         # so the banner shows *before* all extension loading stuff.
    323         self.shell = TerminalInteractiveShell.instance(parent=self,
    324                         profile_dir=self.profile_dir,
--> 325                         ipython_dir=self.ipython_dir, user_ns=self.user_ns)
        global ipython_dir = undefined
        self.ipython_dir = u'/Users/cpd/.ipython'
        global user_ns = undefined
        self.user_ns = None
    326         self.shell.configurables.append(self)
    327 
    328     def init_banner(self):
    329         """optionally display the banner"""
    330         if self.display_banner and self.interact:
    331             self.shell.show_banner()
    332         # Make sure there is a space below the banner.
    333         if self.log_level <= logging.INFO: print()
    334 
    335     def _pylab_changed(self, name, old, new):
    336         """Replace --pylab='inline' with --pylab='auto'"""
    337         if new == 'inline':
    338             warnings.warn("'inline' not available as pylab backend, "
    339                       "using 'auto' instead.")
    340             self.pylab = 'auto'

/Users/cpd/miniconda2/envs/cpd/lib/python2.7/site-packages/traitlets/config/configurable.pyc in instance(cls=<class 'IPython.terminal.interactiveshell.TerminalInteractiveShell'>, *args=(), **kwargs={'ipython_dir': u'/Users/cpd/.ipython', 'parent': <IPython.terminal.ipapp.TerminalIPythonApp object>, 'profile_dir': <IPython.core.profiledir.ProfileDir object>, 'user_ns': None})
    397             >>> class Foo(SingletonConfigurable): pass
    398             >>> foo = Foo.instance()
    399             >>> foo == Foo.instance()
    400             True
    401 
    402         Create a subclass that is retrived using the base class instance::
    403 
    404             >>> class Bar(SingletonConfigurable): pass
    405             >>> class Bam(Bar): pass
    406             >>> bam = Bam.instance()
    407             >>> bam == Bar.instance()
    408             True
    409         """
    410         # Create and save the instance
    411         if cls._instance is None:
--> 412             inst = cls(*args, **kwargs)
        inst = undefined
        cls = <class 'IPython.terminal.interactiveshell.TerminalInteractiveShell'>
        args = ()
        kwargs = {'ipython_dir': u'/Users/cpd/.ipython', 'user_ns': None, 'profile_dir': <IPython.core.profiledir.ProfileDir object at 0x104fb91d0>, 'parent': <IPython.terminal.ipapp.TerminalIPythonApp object at 0x1028e7710>}
    413             # Now make sure that the instance will also be returned by
    414             # parent classes' _instance attribute.
    415             for subclass in cls._walk_mro():
    416                 subclass._instance = inst
    417 
    418         if isinstance(cls._instance, cls):
    419             return cls._instance
    420         else:
    421             raise MultipleInstanceError(
    422                 'Multiple incompatible subclass instances of '
    423                 '%s are being created.' % cls.__name__
    424             )
    425 
    426     @classmethod
    427     def initialized(cls):

/Users/cpd/miniconda2/envs/cpd/lib/python2.7/site-packages/IPython/terminal/interactiveshell.pyc in __init__(self=<IPython.terminal.interactiveshell.TerminalInteractiveShell object>, *args=(), **kwargs={'ipython_dir': u'/Users/cpd/.ipython', 'parent': <IPython.terminal.ipapp.TerminalIPythonApp object>, 'profile_dir': <IPython.core.profiledir.ProfileDir object>, 'user_ns': None})
    381 
    382     def init_alias(self):
    383         # The parent class defines aliases that can be safely used with any
    384         # frontend.
    385         super(TerminalInteractiveShell, self).init_alias()
    386 
    387         # Now define aliases that only make sense on the terminal, because they
    388         # need direct access to the console in a way that we can't emulate in
    389         # GUI or web frontend
    390         if os.name == 'posix':
    391             for cmd in ['clear', 'more', 'less', 'man']:
    392                 self.alias_manager.soft_define_alias(cmd, cmd)
    393 
    394 
    395     def __init__(self, *args, **kwargs):
--> 396         super(TerminalInteractiveShell, self).__init__(*args, **kwargs)
        global super = undefined
        global TerminalInteractiveShell = <class 'IPython.terminal.interactiveshell.TerminalInteractiveShell'>
        self.__init__ = <bound method TerminalInteractiveShell.__init__ of <IPython.terminal.interactiveshell.TerminalInteractiveShell object at 0x104fe7910>>
        args = ()
        kwargs = {'profile_dir': <IPython.core.profiledir.ProfileDir object at 0x104fb91d0>, 'user_ns': None, 'ipython_dir': u'/Users/cpd/.ipython', 'parent': <IPython.terminal.ipapp.TerminalIPythonApp object at 0x1028e7710>}
    397         self.init_prompt_toolkit_cli()
    398         self.init_term_title()
    399         self.keep_running = True
    400 
    401         self.debugger_history = InMemoryHistory()
    402 
    403     def ask_exit(self):
    404         self.keep_running = False
    405 
    406     rl_next_input = None
    407 
    408     def pre_prompt(self):
    409         if self.rl_next_input:
    410             self.pt_cli.application.buffer.text = cast_unicode_py2(self.rl_next_input)
    411             self.rl_next_input = None

/Users/cpd/miniconda2/envs/cpd/lib/python2.7/site-packages/IPython/core/interactiveshell.pyc in __init__(self=<IPython.terminal.interactiveshell.TerminalInteractiveShell object>, ipython_dir=u'/Users/cpd/.ipython', profile_dir=<IPython.core.profiledir.ProfileDir object>, user_module=None, user_ns=None, custom_exceptions=((), None), **kwargs={'parent': <IPython.terminal.ipapp.TerminalIPythonApp object>})
    464         # something in self.user_ns, but before init_sys_modules, which
    465         # is the first thing to modify sys.
    466         # TODO: When we override sys.stdout and sys.stderr before this class
    467         # is created, we are saving the overridden ones here. Not sure if this
    468         # is what we want to do.
    469         self.save_sys_module_state()
    470         self.init_sys_modules()
    471 
    472         # While we're trying to have each part of the code directly access what
    473         # it needs without keeping redundant references to objects, we have too
    474         # much legacy code that expects ip.db to exist.
    475         self.db = PickleShareDB(os.path.join(self.profile_dir.location, 'db'))
    476 
    477         self.init_history()
    478         self.init_encoding()
--> 479         self.init_prefilter()
        self.init_prefilter = <bound method TerminalInteractiveShell.init_prefilter of <IPython.terminal.interactiveshell.TerminalInteractiveShell object at 0x104fe7910>>
    480 
    481         self.init_syntax_highlighting()
    482         self.init_hooks()
    483         self.init_events()
    484         self.init_pushd_popd_magic()
    485         self.init_user_ns()
    486         self.init_logger()
    487         self.init_builtins()
    488 
    489         # The following was in post_config_initialization
    490         self.init_inspector()
    491         if py3compat.PY3:
    492             self.raw_input_original = input
    493         else:
    494             self.raw_input_original = raw_input

/Users/cpd/miniconda2/envs/cpd/lib/python2.7/site-packages/IPython/core/interactiveshell.pyc in init_prefilter(self=<IPython.terminal.interactiveshell.TerminalInteractiveShell object>)
   2308         self.configurables.append(self.extension_manager)
   2309 
   2310     #-------------------------------------------------------------------------
   2311     # Things related to payloads
   2312     #-------------------------------------------------------------------------
   2313 
   2314     def init_payload(self):
   2315         self.payload_manager = PayloadManager(parent=self)
   2316         self.configurables.append(self.payload_manager)
   2317     
   2318     #-------------------------------------------------------------------------
   2319     # Things related to the prefilter
   2320     #-------------------------------------------------------------------------
   2321 
   2322     def init_prefilter(self):
-> 2323         self.prefilter_manager = PrefilterManager(shell=self, parent=self)
        self.prefilter_manager = None
        global PrefilterManager = <class 'IPython.core.prefilter.PrefilterManager'>
        global shell = undefined
        self = <IPython.terminal.interactiveshell.TerminalInteractiveShell object at 0x104fe7910>
        global parent = undefined
   2324         self.configurables.append(self.prefilter_manager)
   2325         # Ultimately this will be refactored in the new interpreter code, but
   2326         # for now, we should expose the main prefilter method (there's legacy
   2327         # code out there that may rely on this).
   2328         self.prefilter = self.prefilter_manager.prefilter_lines
   2329 
   2330     def auto_rewrite_input(self, cmd):
   2331         """Print to the screen the rewritten form of the user's command.
   2332 
   2333         This shows visual feedback by rewriting input lines that cause
   2334         automatic calling to kick in, like::
   2335 
   2336           /f x
   2337 
   2338         into::

/Users/cpd/miniconda2/envs/cpd/lib/python2.7/site-packages/IPython/core/prefilter.pyc in __init__(self=<IPython.core.prefilter.PrefilterManager object>, shell=<IPython.terminal.interactiveshell.TerminalInteractiveShell object>, **kwargs={'parent': <IPython.terminal.interactiveshell.TerminalInteractiveShell object>})
    110     a boolean that determines if the instance is used.
    111 
    112     Users or developers can change the priority or enabled attribute of
    113     transformers or checkers, but they must call the :meth:`sort_checkers`
    114     or :meth:`sort_transformers` method after changing the priority.
    115     """
    116 
    117     multi_line_specials = Bool(True).tag(config=True)
    118     shell = Instance('IPython.core.interactiveshell.InteractiveShellABC', allow_none=True)
    119 
    120     def __init__(self, shell=None, **kwargs):
    121         super(PrefilterManager, self).__init__(shell=shell, **kwargs)
    122         self.shell = shell
    123         self.init_transformers()
    124         self.init_handlers()
--> 125         self.init_checkers()
        self.init_checkers = <bound method PrefilterManager.init_checkers of <IPython.core.prefilter.PrefilterManager object at 0x104ffa190>>
    126 
    127     #-------------------------------------------------------------------------
    128     # API for managing transformers
    129     #-------------------------------------------------------------------------
    130 
    131     def init_transformers(self):
    132         """Create the default transformers."""
    133         self._transformers = []
    134         for transformer_cls in _default_transformers:
    135             transformer_cls(
    136                 shell=self.shell, prefilter_manager=self, parent=self
    137             )
    138 
    139     def sort_transformers(self):
    140         """Sort the transformers by priority.

/Users/cpd/miniconda2/envs/cpd/lib/python2.7/site-packages/IPython/core/prefilter.pyc in init_checkers(self=<IPython.core.prefilter.PrefilterManager object>)
    157 
    158     def unregister_transformer(self, transformer):
    159         """Unregister a transformer instance."""
    160         if transformer in self._transformers:
    161             self._transformers.remove(transformer)
    162 
    163     #-------------------------------------------------------------------------
    164     # API for managing checkers
    165     #-------------------------------------------------------------------------
    166 
    167     def init_checkers(self):
    168         """Create the default checkers."""
    169         self._checkers = []
    170         for checker in _default_checkers:
    171             checker(
--> 172                 shell=self.shell, prefilter_manager=self, parent=self
        global shell = undefined
        self.shell = <IPython.terminal.interactiveshell.TerminalInteractiveShell object at 0x104fe7910>
        global prefilter_manager = undefined
        self = <IPython.core.prefilter.PrefilterManager object at 0x104ffa190>
        global parent = undefined
    173             )
    174 
    175     def sort_checkers(self):
    176         """Sort the checkers by priority.
    177 
    178         This must be called after the priority of a checker is changed.
    179         The :meth:`register_checker` method calls this automatically.
    180         """
    181         self._checkers.sort(key=lambda x: x.priority)
    182 
    183     @property
    184     def checkers(self):
    185         """Return a list of checkers, sorted by priority."""
    186         return self._checkers
    187 

/Users/cpd/miniconda2/envs/cpd/lib/python2.7/site-packages/IPython/core/prefilter.pyc in __init__(self=<EmacsChecker(priority=100, enabled=False)>, shell=<IPython.terminal.interactiveshell.TerminalInteractiveShell object>, prefilter_manager=<IPython.core.prefilter.PrefilterManager object>, **kwargs={'parent': <IPython.core.prefilter.PrefilterManager object>})
    369 #-----------------------------------------------------------------------------
    370 # Prefilter checkers
    371 #-----------------------------------------------------------------------------
    372 
    373 
    374 class PrefilterChecker(Configurable):
    375     """Inspect an input line and return a handler for that line."""
    376 
    377     priority = Integer(100).tag(config=True)
    378     shell = Instance('IPython.core.interactiveshell.InteractiveShellABC', allow_none=True)
    379     prefilter_manager = Instance('IPython.core.prefilter.PrefilterManager', allow_none=True)
    380     enabled = Bool(True).tag(config=True)
    381 
    382     def __init__(self, shell=None, prefilter_manager=None, **kwargs):
    383         super(PrefilterChecker, self).__init__(
--> 384             shell=shell, prefilter_manager=prefilter_manager, **kwargs
        shell = <IPython.terminal.interactiveshell.TerminalInteractiveShell object at 0x104fe7910>
        prefilter_manager = <IPython.core.prefilter.PrefilterManager object at 0x104ffa190>
        kwargs = {'parent': <IPython.core.prefilter.PrefilterManager object at 0x104ffa190>}
    385         )
    386         self.prefilter_manager.register_checker(self)
    387 
    388     def check(self, line_info):
    389         """Inspect line_info and return a handler instance or None."""
    390         return None
    391 
    392     def __repr__(self):
    393         return "<%s(priority=%r, enabled=%r)>" % (
    394             self.__class__.__name__, self.priority, self.enabled)
    395 
    396 
    397 class EmacsChecker(PrefilterChecker):
    398 
    399     priority = Integer(100).tag(config=True)

/Users/cpd/miniconda2/envs/cpd/lib/python2.7/site-packages/traitlets/config/configurable.pyc in __init__(self=<EmacsChecker(priority=100, enabled=False)>, **kwargs={'prefilter_manager': <IPython.core.prefilter.PrefilterManager object>, 'shell': <IPython.terminal.interactiveshell.TerminalInteractiveShell object>})
     69 
     70         config = kwargs.pop('config', None)
     71 
     72         # load kwarg traits, other than config
     73         super(Configurable, self).__init__(**kwargs)
     74 
     75         # load config
     76         if config is not None:
     77             # We used to deepcopy, but for now we are trying to just save
     78             # by reference.  This *could* have side effects as all components
     79             # will share config. In fact, I did find such a side effect in
     80             # _config_changed below. If a config attribute value was a mutable type
     81             # all instances of a component were getting the same copy, effectively
     82             # making that a class attribute.
     83             # self.config = deepcopy(config)
---> 84             self.config = config
        self.config = {'TerminalInteractiveShell': {'colors': 'LightBG'}, 'InteractiveShellApp': {'exec_lines': ['print("setting ipython terminal app gui to qt")', '%matplotlib qt5', '%load_ext Cython', '%load_ext autoreload', '%autoreload 1', 'from __future__ import print_function, division', 'import numpy as np', 'import matplotlib.pyplot as plt', 'plt.ion()', 'from astropy.io import fits', 'import fitsio', 'import pandas as pd', 'import matplotlib', 'palette = matplotlib.cm.RdBu_r', "palette.set_bad(color='g', alpha=0.75)", "palette.set_over(color='m', alpha=0.75)", "palette.set_under(color='c', alpha=0.75)", "matplotlib.cm.register_cmap(name='my_map', cmap=palette)", "matplotlib.rc('image', interpolation='none', cmap = 'my_map')", 'print("Importing __future__.print_function and division, numpy, matplotlib.pyplot, fits, fitsio, and pandas! Turning interactive plotting on! Also setting the default colormap to no interpolation and RdBu_r with bad, over, under color settings.")']}, 'TerminalIPythonApp': {'profile': u'nbserver', 'verbose_crash': True}}
        config = {'TerminalInteractiveShell': {'colors': 'LightBG'}, 'InteractiveShellApp': {'exec_lines': ['print("setting ipython terminal app gui to qt")', '%matplotlib qt5', '%load_ext Cython', '%load_ext autoreload', '%autoreload 1', 'from __future__ import print_function, division', 'import numpy as np', 'import matplotlib.pyplot as plt', 'plt.ion()', 'from astropy.io import fits', 'import fitsio', 'import pandas as pd', 'import matplotlib', 'palette = matplotlib.cm.RdBu_r', "palette.set_bad(color='g', alpha=0.75)", "palette.set_over(color='m', alpha=0.75)", "palette.set_under(color='c', alpha=0.75)", "matplotlib.cm.register_cmap(name='my_map', cmap=palette)", "matplotlib.rc('image', interpolation='none', cmap = 'my_map')", 'print("Importing __future__.print_function and division, numpy, matplotlib.pyplot, fits, fitsio, and pandas! Turning interactive plotting on! Also setting the default colormap to no interpolation and RdBu_r with bad, over, under color settings.")']}, 'TerminalIPythonApp': {'profile': u'nbserver', 'verbose_crash': True}}
     85         else:
     86             # allow _config_default to return something
     87             self._load_config(self.config)
     88 
     89         # Ensure explicit kwargs are applied after loading config.
     90         # This is usually redundant, but ensures config doesn't override
     91         # explicitly assigned values.
     92         for key, value in kwargs.items():
     93             setattr(self, key, value)
     94 
     95     #-------------------------------------------------------------------------
     96     # Static trait notifiations
     97     #-------------------------------------------------------------------------
     98 
     99     @classmethod

/Users/cpd/miniconda2/envs/cpd/lib/python2.7/site-packages/traitlets/traitlets.pyc in __set__(self=<traitlets.traitlets.Instance object>, obj=<EmacsChecker(priority=100, enabled=False)>, value={'TerminalInteractiveShell': {'colors': 'LightBG... {'profile': u'nbserver', 'verbose_crash': True}})
    568             silent = False
    569         if silent is not True:
    570             # we explicitly compare silent to True just in case the equality
    571             # comparison above returns something other than True/False
    572             obj._notify_trait(self.name, old_value, new_value)
    573 
    574     def __set__(self, obj, value):
    575         """Set the value of the trait by self.name for the instance.
    576 
    577         Values pass through a validation stage where errors are raised when
    578         impropper types, or types that cannot be coerced, are encountered.
    579         """
    580         if self.read_only:
    581             raise TraitError('The "%s" trait is read-only.' % self.name)
    582         else:
--> 583             self.set(obj, value)
        self.set = <bound method Instance.set of <traitlets.traitlets.Instance object at 0x102cc9a10>>
        obj = <EmacsChecker(priority=100, enabled=False)>
        value = {'TerminalInteractiveShell': {'colors': 'LightBG'}, 'InteractiveShellApp': {'exec_lines': ['print("setting ipython terminal app gui to qt")', '%matplotlib qt5', '%load_ext Cython', '%load_ext autoreload', '%autoreload 1', 'from __future__ import print_function, division', 'import numpy as np', 'import matplotlib.pyplot as plt', 'plt.ion()', 'from astropy.io import fits', 'import fitsio', 'import pandas as pd', 'import matplotlib', 'palette = matplotlib.cm.RdBu_r', "palette.set_bad(color='g', alpha=0.75)", "palette.set_over(color='m', alpha=0.75)", "palette.set_under(color='c', alpha=0.75)", "matplotlib.cm.register_cmap(name='my_map', cmap=palette)", "matplotlib.rc('image', interpolation='none', cmap = 'my_map')", 'print("Importing __future__.print_function and division, numpy, matplotlib.pyplot, fits, fitsio, and pandas! Turning interactive plotting on! Also setting the default colormap to no interpolation and RdBu_r with bad, over, under color settings.")']}, 'TerminalIPythonApp': {'profile': u'nbserver', 'verbose_crash': True}}
    584 
    585     def _validate(self, obj, value):
    586         if value is None and self.allow_none:
    587             return value
    588         if hasattr(self, 'validate'):
    589             value = self.validate(obj, value)
    590         if obj._cross_validation_lock is False:
    591             value = self._cross_validate(obj, value)
    592         return value
    593 
    594     def _cross_validate(self, obj, value):
    595         if self.name in obj._trait_validators:
    596             proposal = Bunch({'trait': self, 'value': value, 'owner': obj})
    597             value = obj._trait_validators[self.name](obj, proposal)
    598         elif hasattr(obj, '_%s_validate' % self.name):

/Users/cpd/miniconda2/envs/cpd/lib/python2.7/site-packages/traitlets/traitlets.pyc in set(self=<traitlets.traitlets.Instance object>, obj=<EmacsChecker(priority=100, enabled=False)>, value={'TerminalInteractiveShell': {'colors': 'LightBG... {'profile': u'nbserver', 'verbose_crash': True}})
    557         new_value = self._validate(obj, value)
    558         try:
    559             old_value = obj._trait_values[self.name]
    560         except KeyError:
    561             old_value = self.default_value
    562 
    563         obj._trait_values[self.name] = new_value
    564         try:
    565             silent = bool(old_value == new_value)
    566         except:
    567             # if there is an error in comparing, default to notify
    568             silent = False
    569         if silent is not True:
    570             # we explicitly compare silent to True just in case the equality
    571             # comparison above returns something other than True/False
--> 572             obj._notify_trait(self.name, old_value, new_value)
        obj._notify_trait = <bound method EmacsChecker._notify_trait of <EmacsChecker(priority=100, enabled=False)>>
        self.name = 'config'
        old_value = traitlets.Undefined
        new_value = {'TerminalInteractiveShell': {'colors': 'LightBG'}, 'InteractiveShellApp': {'exec_lines': ['print("setting ipython terminal app gui to qt")', '%matplotlib qt5', '%load_ext Cython', '%load_ext autoreload', '%autoreload 1', 'from __future__ import print_function, division', 'import numpy as np', 'import matplotlib.pyplot as plt', 'plt.ion()', 'from astropy.io import fits', 'import fitsio', 'import pandas as pd', 'import matplotlib', 'palette = matplotlib.cm.RdBu_r', "palette.set_bad(color='g', alpha=0.75)", "palette.set_over(color='m', alpha=0.75)", "palette.set_under(color='c', alpha=0.75)", "matplotlib.cm.register_cmap(name='my_map', cmap=palette)", "matplotlib.rc('image', interpolation='none', cmap = 'my_map')", 'print("Importing __future__.print_function and division, numpy, matplotlib.pyplot, fits, fitsio, and pandas! Turning interactive plotting on! Also setting the default colormap to no interpolation and RdBu_r with bad, over, under color settings.")']}, 'TerminalIPythonApp': {'profile': u'nbserver', 'verbose_crash': True}}
    573 
    574     def __set__(self, obj, value):
    575         """Set the value of the trait by self.name for the instance.
    576 
    577         Values pass through a validation stage where errors are raised when
    578         impropper types, or types that cannot be coerced, are encountered.
    579         """
    580         if self.read_only:
    581             raise TraitError('The "%s" trait is read-only.' % self.name)
    582         else:
    583             self.set(obj, value)
    584 
    585     def _validate(self, obj, value):
    586         if value is None and self.allow_none:
    587             return value

/Users/cpd/miniconda2/envs/cpd/lib/python2.7/site-packages/traitlets/traitlets.pyc in _notify_trait(self=<EmacsChecker(priority=100, enabled=False)>, name='config', old_value=traitlets.Undefined, new_value={'TerminalInteractiveShell': {'colors': 'LightBG... {'profile': u'nbserver', 'verbose_crash': True}})
   1122                 self._cross_validation_lock = False
   1123                 # Restore method retrieval from class
   1124                 del self.notify_change
   1125 
   1126                 # trigger delayed notifications
   1127                 for changes in cache.values():
   1128                     for change in changes:
   1129                         self.notify_change(change)
   1130 
   1131     def _notify_trait(self, name, old_value, new_value):
   1132         self.notify_change(Bunch(
   1133             name=name,
   1134             old=old_value,
   1135             new=new_value,
   1136             owner=self,
-> 1137             type='change',
        global type = undefined
   1138         ))
   1139 
   1140     def notify_change(self, change):
   1141         if not isinstance(change, Bunch):
   1142             # cast to bunch if given a dict
   1143             change = Bunch(change)
   1144         name, type = change.name, change.type
   1145 
   1146         callables = []
   1147         callables.extend(self._trait_notifiers.get(name, {}).get(type, []))
   1148         callables.extend(self._trait_notifiers.get(name, {}).get(All, []))
   1149         callables.extend(self._trait_notifiers.get(All, {}).get(type, []))
   1150         callables.extend(self._trait_notifiers.get(All, {}).get(All, []))
   1151 
   1152         # Now static ones

/Users/cpd/miniconda2/envs/cpd/lib/python2.7/site-packages/traitlets/traitlets.pyc in notify_change(self=<EmacsChecker(priority=100, enabled=False)>, change={'owner': <EmacsChecker(priority=100, enabled=Fa...ts.Undefined, 'name': 'config', 'type': 'change'})
   1159                 cb = getattr(self, magic_name)
   1160                 # Only append the magic method if it was not manually registered
   1161                 if cb not in callables:
   1162                     callables.append(_callback_wrapper(cb))
   1163 
   1164         # Call them all now
   1165         # Traits catches and logs errors here.  I allow them to raise
   1166         for c in callables:
   1167             # Bound methods have an additional 'self' argument.
   1168 
   1169             if isinstance(c, _CallbackWrapper):
   1170                 c = c.__call__
   1171             elif isinstance(c, EventHandler) and c.name is not None:
   1172                 c = getattr(self, c.name)
   1173 
-> 1174             c(change)
        c = <bound method ?.compatible_observer of <EmacsChecker(priority=100, enabled=False)>>
        change = {'owner': <EmacsChecker(priority=100, enabled=False)>, 'new': {'TerminalInteractiveShell': {'colors': 'LightBG'}, 'InteractiveShellApp': {'exec_lines': ['print("setting ipython terminal app gui to qt")', '%matplotlib qt5', '%load_ext Cython', '%load_ext autoreload', '%autoreload 1', 'from __future__ import print_function, division', 'import numpy as np', 'import matplotlib.pyplot as plt', 'plt.ion()', 'from astropy.io import fits', 'import fitsio', 'import pandas as pd', 'import matplotlib', 'palette = matplotlib.cm.RdBu_r', "palette.set_bad(color='g', alpha=0.75)", "palette.set_over(color='m', alpha=0.75)", "palette.set_under(color='c', alpha=0.75)", "matplotlib.cm.register_cmap(name='my_map', cmap=palette)", "matplotlib.rc('image', interpolation='none', cmap = 'my_map')", 'print("Importing __future__.print_function and division, numpy, matplotlib.pyplot, fits, fitsio, and pandas! Turning interactive plotting on! Also setting the default colormap to no interpolation and RdBu_r with bad, over, under color settings.")']}, 'TerminalIPythonApp': {'profile': u'nbserver', 'verbose_crash': True}}, 'old': traitlets.Undefined, 'name': 'config', 'type': 'change'}
   1175 
   1176     def _add_notifiers(self, handler, name, type):
   1177         if name not in self._trait_notifiers:
   1178             nlist = []
   1179             self._trait_notifiers[name] = {type: nlist}
   1180         else:
   1181             if type not in self._trait_notifiers[name]:
   1182                 nlist = []
   1183                 self._trait_notifiers[name][type] = nlist
   1184             else:
   1185                 nlist = self._trait_notifiers[name][type]
   1186         if handler not in nlist:
   1187             nlist.append(handler)
   1188 
   1189     def _remove_notifiers(self, handler, name, type):

/Users/cpd/miniconda2/envs/cpd/lib/python2.7/site-packages/traitlets/traitlets.pyc in compatible_observer(self=<EmacsChecker(priority=100, enabled=False)>, change_or_name={'owner': <EmacsChecker(priority=100, enabled=Fa...ts.Undefined, 'name': 'config', 'type': 'change'}, old=traitlets.Undefined, new=traitlets.Undefined)
    802     """
    803     def compatible_observer(self, change_or_name, old=Undefined, new=Undefined):
    804         if isinstance(change_or_name, dict):
    805             change = change_or_name
    806         else:
    807             clsname = self.__class__.__name__
    808             warn("A parent of %s._%s_changed has adopted the new (traitlets 4.1) @observe(change) API" % (
    809                 clsname, change_or_name), DeprecationWarning)
    810             change = Bunch(
    811                 type='change',
    812                 old=old,
    813                 new=new,
    814                 name=change_or_name,
    815                 owner=self,
    816             )
--> 817         return func(self, change)
        global func = undefined
        self = <EmacsChecker(priority=100, enabled=False)>
        change = {'owner': <EmacsChecker(priority=100, enabled=False)>, 'new': {'TerminalInteractiveShell': {'colors': 'LightBG'}, 'InteractiveShellApp': {'exec_lines': ['print("setting ipython terminal app gui to qt")', '%matplotlib qt5', '%load_ext Cython', '%load_ext autoreload', '%autoreload 1', 'from __future__ import print_function, division', 'import numpy as np', 'import matplotlib.pyplot as plt', 'plt.ion()', 'from astropy.io import fits', 'import fitsio', 'import pandas as pd', 'import matplotlib', 'palette = matplotlib.cm.RdBu_r', "palette.set_bad(color='g', alpha=0.75)", "palette.set_over(color='m', alpha=0.75)", "palette.set_under(color='c', alpha=0.75)", "matplotlib.cm.register_cmap(name='my_map', cmap=palette)", "matplotlib.rc('image', interpolation='none', cmap = 'my_map')", 'print("Importing __future__.print_function and division, numpy, matplotlib.pyplot, fits, fitsio, and pandas! Turning interactive plotting on! Also setting the default colormap to no interpolation and RdBu_r with bad, over, under color settings.")']}, 'TerminalIPythonApp': {'profile': u'nbserver', 'verbose_crash': True}}, 'old': traitlets.Undefined, 'name': 'config', 'type': 'change'}
    818     return compatible_observer
    819 
    820 
    821 def validate(*names):
    822     """A decorator to register cross validator of HasTraits object's state
    823     when a Trait is set.
    824 
    825     The handler passed to the decorator must have one ``proposal`` dict argument.
    826     The proposal dictionary must hold the following keys:
    827     * ``owner`` : the HasTraits instance
    828     * ``value`` : the proposed value for the modified trait attribute
    829     * ``trait`` : the TraitType instance associated with the attribute
    830 
    831     Parameters
    832     ----------

/Users/cpd/miniconda2/envs/cpd/lib/python2.7/site-packages/traitlets/config/configurable.pyc in _config_changed(self=<EmacsChecker(priority=100, enabled=False)>, change={'owner': <EmacsChecker(priority=100, enabled=Fa...ts.Undefined, 'name': 'config', 'type': 'change'})
    171     @observe_compat
    172     def _config_changed(self, change):
    173         """Update all the class traits having ``config=True`` in metadata.
    174 
    175         For any class trait with a ``config`` metadata attribute that is
    176         ``True``, we update the trait with the value of the corresponding
    177         config entry.
    178         """
    179         # Get all traits with a config metadata entry that is True
    180         traits = self.traits(config=True)
    181 
    182         # We auto-load config section for this class as well as any parent
    183         # classes that are Configurable subclasses.  This starts with Configurable
    184         # and works down the mro loading the config for each section.
    185         section_names = self.section_names()
--> 186         self._load_config(change.new, traits=traits, section_names=section_names)
        self._load_config = <bound method EmacsChecker._load_config of <EmacsChecker(priority=100, enabled=False)>>
        change.new = {'TerminalInteractiveShell': {'colors': 'LightBG'}, 'InteractiveShellApp': {'exec_lines': ['print("setting ipython terminal app gui to qt")', '%matplotlib qt5', '%load_ext Cython', '%load_ext autoreload', '%autoreload 1', 'from __future__ import print_function, division', 'import numpy as np', 'import matplotlib.pyplot as plt', 'plt.ion()', 'from astropy.io import fits', 'import fitsio', 'import pandas as pd', 'import matplotlib', 'palette = matplotlib.cm.RdBu_r', "palette.set_bad(color='g', alpha=0.75)", "palette.set_over(color='m', alpha=0.75)", "palette.set_under(color='c', alpha=0.75)", "matplotlib.cm.register_cmap(name='my_map', cmap=palette)", "matplotlib.rc('image', interpolation='none', cmap = 'my_map')", 'print("Importing __future__.print_function and division, numpy, matplotlib.pyplot, fits, fitsio, and pandas! Turning interactive plotting on! Also setting the default colormap to no interpolation and RdBu_r with bad, over, under color settings.")']}, 'TerminalIPythonApp': {'profile': u'nbserver', 'verbose_crash': True}}
        traits = {'priority': <traitlets.traitlets.Integer object at 0x1036d4ad0>, 'enabled': <traitlets.traitlets.Bool object at 0x1036d4b50>}
        section_names = ['Configurable', 'PrefilterChecker', 'EmacsChecker']
    187 
    188     def update_config(self, config):
    189         """Update config and load the new values"""
    190         # traitlets prior to 4.2 created a copy of self.config in order to trigger change events.
    191         # Some projects (IPython < 5) relied upon one side effect of this,
    192         # that self.config prior to update_config was not modified in-place.
    193         # For backward-compatibility, we must ensure that self.config
    194         # is a new object and not modified in-place,
    195         # but config consumers should not rely on this behavior.
    196         self.config = deepcopy(self.config)
    197         # load config
    198         self._load_config(config)
    199         # merge it into self.config
    200         self.config.merge(config)
    201         # TODO: trigger change event if/when dict-update change events take place

/Users/cpd/miniconda2/envs/cpd/lib/python2.7/site-packages/traitlets/config/configurable.pyc in _load_config(self=<EmacsChecker(priority=100, enabled=False)>, cfg={'TerminalInteractiveShell': {'colors': 'LightBG... {'profile': u'nbserver', 'verbose_crash': True}}, section_names=['Configurable', 'PrefilterChecker', 'EmacsChecker'], traits={'enabled': <traitlets.traitlets.Bool object>, 'priority': <traitlets.traitlets.Integer object>})
    124             for sname in self.section_names():
    125                 # Don't do a blind getattr as that would cause the config to
    126                 # dynamically create the section with name Class.__name__.
    127                 if c._has_section(sname):
    128                     my_config.merge(c[sname])
    129         return my_config
    130 
    131     def _load_config(self, cfg, section_names=None, traits=None):
    132         """load traits from a Config object"""
    133 
    134         if traits is None:
    135             traits = self.traits(config=True)
    136         if section_names is None:
    137             section_names = self.section_names()
    138 
--> 139         my_config = self._find_my_config(cfg)
        my_config = undefined
        self._find_my_config = <bound method EmacsChecker._find_my_config of <EmacsChecker(priority=100, enabled=False)>>
        cfg = {'TerminalInteractiveShell': {'colors': 'LightBG'}, 'InteractiveShellApp': {'exec_lines': ['print("setting ipython terminal app gui to qt")', '%matplotlib qt5', '%load_ext Cython', '%load_ext autoreload', '%autoreload 1', 'from __future__ import print_function, division', 'import numpy as np', 'import matplotlib.pyplot as plt', 'plt.ion()', 'from astropy.io import fits', 'import fitsio', 'import pandas as pd', 'import matplotlib', 'palette = matplotlib.cm.RdBu_r', "palette.set_bad(color='g', alpha=0.75)", "palette.set_over(color='m', alpha=0.75)", "palette.set_under(color='c', alpha=0.75)", "matplotlib.cm.register_cmap(name='my_map', cmap=palette)", "matplotlib.rc('image', interpolation='none', cmap = 'my_map')", 'print("Importing __future__.print_function and division, numpy, matplotlib.pyplot, fits, fitsio, and pandas! Turning interactive plotting on! Also setting the default colormap to no interpolation and RdBu_r with bad, over, under color settings.")']}, 'TerminalIPythonApp': {'profile': u'nbserver', 'verbose_crash': True}}
    140 
    141         # hold trait notifications until after all config has been loaded
    142         with self.hold_trait_notifications():
    143             for name, config_value in my_config.items():
    144                 if name in traits:
    145                     if isinstance(config_value, LazyConfigValue):
    146                         # ConfigValue is a wrapper for using append / update on containers
    147                         # without having to copy the initial value
    148                         initial = getattr(self, name)
    149                         config_value = config_value.get_value(initial)
    150                     # We have to do a deepcopy here if we don't deepcopy the entire
    151                     # config object. If we don't, a mutable config_value will be
    152                     # shared by all instances, effectively making it a class attribute.
    153                     setattr(self, name, deepcopy(config_value))
    154                 elif not _is_section_key(name) and not isinstance(config_value, Config):

/Users/cpd/miniconda2/envs/cpd/lib/python2.7/site-packages/traitlets/config/configurable.pyc in _find_my_config(self=<EmacsChecker(priority=100, enabled=False)>, cfg={'TerminalInteractiveShell': {'colors': 'LightBG... {'profile': u'nbserver', 'verbose_crash': True}})
    106     def _find_my_config(self, cfg):
    107         """extract my config from a global Config object
    108 
    109         will construct a Config object of only the config values that apply to me
    110         based on my mro(), as well as those of my parent(s) if they exist.
    111 
    112         If I am Bar and my parent is Foo, and their parent is Tim,
    113         this will return merge following config sections, in this order::
    114 
    115             [Bar, Foo.bar, Tim.Foo.Bar]
    116 
    117         With the last item being the highest priority.
    118         """
    119         cfgs = [cfg]
    120         if self.parent:
--> 121             cfgs.append(self.parent._find_my_config(cfg))
        cfgs.append = <built-in method append of list object at 0x10353a5a8>
        self.parent._find_my_config = <bound method PrefilterManager._find_my_config of <IPython.core.prefilter.PrefilterManager object at 0x104ffa190>>
        cfg = {'TerminalInteractiveShell': {'colors': 'LightBG'}, 'InteractiveShellApp': {'exec_lines': ['print("setting ipython terminal app gui to qt")', '%matplotlib qt5', '%load_ext Cython', '%load_ext autoreload', '%autoreload 1', 'from __future__ import print_function, division', 'import numpy as np', 'import matplotlib.pyplot as plt', 'plt.ion()', 'from astropy.io import fits', 'import fitsio', 'import pandas as pd', 'import matplotlib', 'palette = matplotlib.cm.RdBu_r', "palette.set_bad(color='g', alpha=0.75)", "palette.set_over(color='m', alpha=0.75)", "palette.set_under(color='c', alpha=0.75)", "matplotlib.cm.register_cmap(name='my_map', cmap=palette)", "matplotlib.rc('image', interpolation='none', cmap = 'my_map')", 'print("Importing __future__.print_function and division, numpy, matplotlib.pyplot, fits, fitsio, and pandas! Turning interactive plotting on! Also setting the default colormap to no interpolation and RdBu_r with bad, over, under color settings.")']}, 'TerminalIPythonApp': {'profile': u'nbserver', 'verbose_crash': True}}
    122         my_config = Config()
    123         for c in cfgs:
    124             for sname in self.section_names():
    125                 # Don't do a blind getattr as that would cause the config to
    126                 # dynamically create the section with name Class.__name__.
    127                 if c._has_section(sname):
    128                     my_config.merge(c[sname])
    129         return my_config
    130 
    131     def _load_config(self, cfg, section_names=None, traits=None):
    132         """load traits from a Config object"""
    133 
    134         if traits is None:
    135             traits = self.traits(config=True)
    136         if section_names is None:

/Users/cpd/miniconda2/envs/cpd/lib/python2.7/site-packages/traitlets/config/configurable.pyc in _find_my_config(self=<IPython.core.prefilter.PrefilterManager object>, cfg={'TerminalInteractiveShell': {'colors': 'LightBG... {'profile': u'nbserver', 'verbose_crash': True}})
    112         If I am Bar and my parent is Foo, and their parent is Tim,
    113         this will return merge following config sections, in this order::
    114 
    115             [Bar, Foo.bar, Tim.Foo.Bar]
    116 
    117         With the last item being the highest priority.
    118         """
    119         cfgs = [cfg]
    120         if self.parent:
    121             cfgs.append(self.parent._find_my_config(cfg))
    122         my_config = Config()
    123         for c in cfgs:
    124             for sname in self.section_names():
    125                 # Don't do a blind getattr as that would cause the config to
    126                 # dynamically create the section with name Class.__name__.
--> 127                 if c._has_section(sname):
        c._has_section = <bound method Config._has_section of {'TerminalInteractiveShell': {'colors': 'LightBG'}, 'InteractiveShellApp': {'exec_lines': ['print("setting ipython terminal app gui to qt")', '%matplotlib qt5', '%load_ext Cython', '%load_ext autoreload', '%autoreload 1', 'from __future__ import print_function, division', 'import numpy as np', 'import matplotlib.pyplot as plt', 'plt.ion()', 'from astropy.io import fits', 'import fitsio', 'import pandas as pd', 'import matplotlib', 'palette = matplotlib.cm.RdBu_r', "palette.set_bad(color='g', alpha=0.75)", "palette.set_over(color='m', alpha=0.75)", "palette.set_under(color='c', alpha=0.75)", "matplotlib.cm.register_cmap(name='my_map', cmap=palette)", "matplotlib.rc('image', interpolation='none', cmap = 'my_map')", 'print("Importing __future__.print_function and division, numpy, matplotlib.pyplot, fits, fitsio, and pandas! Turning interactive plotting on! Also setting the default colormap to no interpolation and RdBu_r with bad, over, under color settings.")']}, 'TerminalIPythonApp': {'profile': u'nbserver', 'verbose_crash': True}}>
        sname = 'Configurable'
    128                     my_config.merge(c[sname])
    129         return my_config
    130 
    131     def _load_config(self, cfg, section_names=None, traits=None):
    132         """load traits from a Config object"""
    133 
    134         if traits is None:
    135             traits = self.traits(config=True)
    136         if section_names is None:
    137             section_names = self.section_names()
    138 
    139         my_config = self._find_my_config(cfg)
    140 
    141         # hold trait notifications until after all config has been loaded
    142         with self.hold_trait_notifications():

/Users/cpd/miniconda2/envs/cpd/lib/python2.7/site-packages/traitlets/config/loader.pyc in _has_section(self={'TerminalInteractiveShell': {'colors': 'LightBG... {'profile': u'nbserver', 'verbose_crash': True}}, key='Configurable')
    217     
    218     def __contains__(self, key):
    219         # allow nested contains of the form `"Section.key" in config`
    220         if '.' in key:
    221             first, remainder = key.split('.', 1)
    222             if first not in self:
    223                 return False
    224             return remainder in self[first]
    225         
    226         return super(Config, self).__contains__(key)
    227     
    228     # .has_key is deprecated for dictionaries.
    229     has_key = __contains__
    230     
    231     def _has_section(self, key):
--> 232         return _is_section_key(key) and key in self
        global _is_section_key = <function _is_section_key at 0x102ccc410>
        key = 'Configurable'
        self = {'TerminalInteractiveShell': {'colors': 'LightBG'}, 'InteractiveShellApp': {'exec_lines': ['print("setting ipython terminal app gui to qt")', '%matplotlib qt5', '%load_ext Cython', '%load_ext autoreload', '%autoreload 1', 'from __future__ import print_function, division', 'import numpy as np', 'import matplotlib.pyplot as plt', 'plt.ion()', 'from astropy.io import fits', 'import fitsio', 'import pandas as pd', 'import matplotlib', 'palette = matplotlib.cm.RdBu_r', "palette.set_bad(color='g', alpha=0.75)", "palette.set_over(color='m', alpha=0.75)", "palette.set_under(color='c', alpha=0.75)", "matplotlib.cm.register_cmap(name='my_map', cmap=palette)", "matplotlib.rc('image', interpolation='none', cmap = 'my_map')", 'print("Importing __future__.print_function and division, numpy, matplotlib.pyplot, fits, fitsio, and pandas! Turning interactive plotting on! Also setting the default colormap to no interpolation and RdBu_r with bad, over, under color settings.")']}, 'TerminalIPythonApp': {'profile': u'nbserver', 'verbose_crash': True}}
    233     
    234     def copy(self):
    235         return type(self)(dict.copy(self))
    236 
    237     def __copy__(self):
    238         return self.copy()
    239 
    240     def __deepcopy__(self, memo):
    241         new_config = type(self)()
    242         for key, value in self.items():
    243             if isinstance(value, (Config, LazyConfigValue)):
    244                 # deep copy config objects
    245                 value = copy.deepcopy(value, memo)
    246             elif type(value) in {dict, list, set, tuple}:
    247                 # shallow copy plain container traits

/Users/cpd/miniconda2/envs/cpd/lib/python2.7/site-packages/traitlets/config/loader.pyc in _is_section_key(key='Configurable')
    137         """
    138         d = {}
    139         if self._update:
    140             d['update'] = self._update
    141         if self._extend:
    142             d['extend'] = self._extend
    143         if self._prepend:
    144             d['prepend'] = self._prepend
    145         elif self._inserts:
    146             d['inserts'] = self._inserts
    147         return d
    148 
    149 
    150 def _is_section_key(key):
    151     """Is a Config key a section name (does it start with a capital)?"""
--> 152     if key and key[0].upper()==key[0] and not key.startswith('_'):
        key = 'Configurable'
        key.upper = <built-in method upper of str object at 0x102a995e0>
        key.startswith = <built-in method startswith of str object at 0x102a995e0>
    153         return True
    154     else:
    155         return False
    156 
    157 
    158 class Config(dict):
    159     """An attribute based dict that can do smart merges."""
    160 
    161     def __init__(self, *args, **kwds):
    162         dict.__init__(self, *args, **kwds)
    163         self._ensure_subconfig()
    164     
    165     def _ensure_subconfig(self):
    166         """ensure that sub-dicts that should be Config objects are
    167         

KeyboardInterrupt: 

***************************************************************************

History of session input: